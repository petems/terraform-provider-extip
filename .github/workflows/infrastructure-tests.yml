name: Infrastructure Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24'
  TF_VERSION: '1.9'

jobs:
  terraform-compatibility:
    name: Terraform Compatibility Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform-version: ['1.0', '1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7', '1.8', '1.9']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Terraform ${{ matrix.terraform-version }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform-version }}
          terraform_wrapper: false

      - name: Build provider
        run: |
          go build -o terraform-provider-extip .

      - name: Create provider configuration
        run: |
          mkdir -p ~/.terraform.d/plugins/registry.terraform.io/petems/extip/1.0.0/linux_amd64/
          cp terraform-provider-extip ~/.terraform.d/plugins/registry.terraform.io/petems/extip/1.0.0/linux_amd64/

      - name: Test provider with Terraform ${{ matrix.terraform-version }}
        run: |
          # Create a temporary test directory to avoid conflicts
          mkdir -p test-tf-${{ matrix.terraform-version }}
          cd test-tf-${{ matrix.terraform-version }}
          
          # Create terraform configuration
          cat > main.tf << 'EOF'
          terraform {
            required_version = ">= ${{ matrix.terraform-version }}"
            required_providers {
              extip = {
                source = "petems/extip"
                version = "1.0.0"
              }
            }
          }

          data "extip" "test" {
            resolver = "https://checkip.amazonaws.com/"
          }

          output "external_ip" {
            value = data.extip.test.ipaddress
          }
          EOF
          
          terraform init
          terraform validate
          terraform plan
          # Test the actual functionality with short timeout
          timeout 10s terraform apply -auto-approve || echo "Apply test completed (timeout expected)"
          terraform destroy -auto-approve || echo "Destroy completed"

  provider-schema-validation:
    name: Provider Schema Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install tfplugindocs
        run: |
          go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Validate provider schema
        run: |
          tfplugindocs validate

      - name: Generate documentation
        run: |
          tfplugindocs generate
          # Remove excessive blank lines (replace 4+ consecutive blank lines with 1)
          find docs -name "*.md" -exec sed -i '/^$/N;/^\n$/N;/^\n\n$/N;/^\n\n\n$/d' {} \;
          # Wrap bare URLs for markdown compliance
          find docs -name "*.md" -exec sed -i 's|defaults to https://checkip.amazonaws.com/|defaults to <https://checkip.amazonaws.com/>|g' {} \;

      - name: Check for schema changes
        run: |
          git diff --exit-code docs/ || (
            echo "Provider schema documentation is out of sync"
            echo "Run 'tfplugindocs generate' to update documentation"
            exit 1
          )

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Terraform ${{ env.TF_VERSION }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Create test infrastructure
        run: |
          mkdir -p test-infra
          cd test-infra
          
          cat > main.tf << 'EOF'
          terraform {
            required_providers {
              extip = {
                source = "petems/extip"
              }
            }
          }
          
          # Test default configuration
          data "extip" "default" {}
          
          # Test with custom resolver
          data "extip" "custom_resolver" {
            resolver = "https://checkip.amazonaws.com/"
          }
          
          # Test with custom timeout
          data "extip" "custom_timeout" {
            client_timeout = 5000
          }
          
          # Test with IP validation disabled
          data "extip" "no_validation" {
            validate_ip = false
          }
          
          output "default_ip" {
            value = data.extip.default.ipaddress
          }
          
          output "custom_resolver_ip" {
            value = data.extip.custom_resolver.ipaddress
          }
          
          output "custom_timeout_ip" {
            value = data.extip.custom_timeout.ipaddress
          }
          
          output "no_validation_ip" {
            value = data.extip.no_validation.ipaddress
          }
          EOF

      - name: Build and install provider
        run: |
          go build -o terraform-provider-extip .
          mkdir -p ~/.terraform.d/plugins/registry.terraform.io/petems/extip/1.0.0/linux_amd64/
          cp terraform-provider-extip ~/.terraform.d/plugins/registry.terraform.io/petems/extip/1.0.0/linux_amd64/

      - name: Run integration tests
        run: |
          cd test-infra
          terraform init
          terraform validate
          terraform plan
          
          # Apply and capture output
          terraform apply -auto-approve
          
          # Validate outputs
          DEFAULT_IP=$(terraform output -raw default_ip)
          CUSTOM_IP=$(terraform output -raw custom_resolver_ip)
          
          echo "Default IP: $DEFAULT_IP"
          echo "Custom resolver IP: $CUSTOM_IP"
          
          # Basic IP validation
          if [[ $DEFAULT_IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "✅ Default IP is valid format"
          else
            echo "❌ Default IP is invalid format: $DEFAULT_IP"
            exit 1
          fi
          
          if [[ $CUSTOM_IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "✅ Custom resolver IP is valid format"
          else
            echo "❌ Custom resolver IP is invalid format: $CUSTOM_IP"
            exit 1
          fi
          
          # Both IPs should be the same (same external IP)
          if [ "$DEFAULT_IP" = "$CUSTOM_IP" ]; then
            echo "✅ Both resolvers return the same IP"
          else
            echo "⚠️ Different IPs returned (this may be normal): Default=$DEFAULT_IP, Custom=$CUSTOM_IP"
          fi
          
          terraform destroy -auto-approve

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run performance benchmarks
        run: |
          # Run benchmarks and capture results
          go test -bench=. -benchmem -count=5 ./extip/ > benchmark_results.txt
          
          echo "## Performance Benchmark Results" > performance_report.md
          echo '```' >> performance_report.md
          cat benchmark_results.txt >> performance_report.md
          echo '```' >> performance_report.md
          
          cat performance_report.md

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.sha }}
          path: |
            benchmark_results.txt
            performance_report.md
          retention-days: 30