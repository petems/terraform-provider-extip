# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (paultyng/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: Release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: '1.24'

jobs:
  goreleaser:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests before release
        run: |
          make test-short

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Cache GoReleaser
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: goreleaser-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            goreleaser-${{ runner.os }}-

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean --timeout=60m
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: goreleaser
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate release artifacts
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} artifacts created successfully"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    if: always() && startsWith(github.ref, 'refs/tags/v')
    needs: [goreleaser, validate-release]

    steps:
      - name: Notify on success
        if: needs.goreleaser.result == 'success' && needs.validate-release.result == 'success'
        run: |
          echo "üéâ Release ${{ github.ref_name }} was successful!"
          echo "üì¶ Check the release at: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "üìù Release artifacts are signed and ready for use"

      - name: Notify on failure
        if: needs.goreleaser.result == 'failure' || needs.validate-release.result == 'failure'
        run: |
          echo "‚ùå Release ${{ github.ref_name }} failed!"
          echo "üîç Check the workflow logs for details."
          exit 1